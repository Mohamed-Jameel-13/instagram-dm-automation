generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  automations   Automation[]
  followers     Follower[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Automation {
  id           String   @id @default(cuid())
  name         String
  active       Boolean  @default(false)
  triggerType  String
  keywords     String
  actionType   String
  message      String?
  commentReply String?
  aiPrompt     String?
  posts        String
  dmMode       String   @default("normal")
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follower {
  id               String    @id @default(cuid())
  userId           String
  followerId       String
  followerUsername String?
  isNew            Boolean   @default(true)
  followedAt       DateTime  @default(now())
  lastCommentAt    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, followerId])
}

model AutomationLog {
  id            String   @id @default(cuid())
  automationId  String
  triggerType   String
  triggerText   String
  userId        String
  username      String?
  isNewFollower Boolean?
  triggeredAt   DateTime @default(now())
  createdAt     DateTime @default(now())
}

model TrackedUser {
  id              String   @id @default(cuid())
  userId          String
  instagramUserId String
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, instagramUserId])
}

model ConversationSession {
  id                  String   @id @default(cuid())
  userId              String
  instagramUserId     String
  automationId        String
  isActive            Boolean  @default(true)
  conversationHistory String?
  lastActivityAt      DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([userId, instagramUserId, automationId])
}

model ProcessedWebhook {
  id          String   @id @default(cuid())
  eventId     String   @unique
  requestId   String
  webhookBody String?
  processedAt DateTime @default(now())
  result      String?
  createdAt   DateTime @default(now())

  @@index([eventId])
  @@index([processedAt])
}
